50 Python Practice Questions: Strings, Functions, Control Flow & Loops 

String Operations 

Beginner Level 

Question 1: What will be the output of the following code? 

s = "Python Programming" 
print(s[7:]) 

Question 2: How do you find the length of a string in Python? 

s = "Hello World" 
# Find the length of s 

Question 3: Write code to convert a string to uppercase. 

s = "python" 
# Convert to uppercase 

Question 4: What would be the result of the following operation? 

print("Hello" + " " + "World") 

Question 5: Write code to check if a string contains a specific substring. 

s = "Python is amazing" 
# Check if "amazing" is in the string 

Intermediate Level 

Question 6: Write a program to reverse a string without using the built-in reverse function. 

s = "Python" 
# Reverse the string 

Question 7: How would you replace all occurrences of a character in a string? 

s = "Hello World" 
# Replace all 'l' with 'x' 

Question 8: Write code to count the number of occurrences of a substring in a string. 

s = "Python is great and Python is easy" 
# Count occurrences of "Python" 

Question 9: What does the strip() method do? Write an example using it. 

s = "  Hello World  " 
# Remove whitespace from beginning and end 

Question 10: Write a function that checks if a string is a palindrome (reads the same forward and backward). 

# Is "racecar" a palindrome? 

Advanced Level 

Question 11: Write code to find all unique characters in a string and their counts. 

s = "programming" 
# Find unique characters and their counts 

Question 12: How would you join a list of strings with a specific delimiter? 

words = ["Python", "is", "awesome"] 
# Join with space as delimiter 

Question 13: Write a function that checks if two strings are anagrams of each other. 

# Check if "listen" and "silent" are anagrams 

Question 14: Implement a function that formats a phone number from "1234567890" to "(123) 456-7890". 

# Format "1234567890" to "(123) 456-7890" 

Question 15: Write a function to find the longest word in a string. 

s = "Python is a great programming language" 
# Find the longest word 

Functions 

Beginner Level 

Question 16: Write a function that takes two parameters and returns their sum. 

# Write a function to add two numbers 

Question 17: What is the output of the following code? 

def greet(name="Guest"): 
    return f"Hello, {name}!" 

print(greet()) 
print(greet("Alice")) 

Question 18: What is a side effect in a function? 

# Explain with an example 

Question 19: Write a function that calculates the area of a rectangle. 

# Area = length × width 

Question 20: How do you define a function that takes a variable number of arguments? 

# Write a function that can take any number of parameters and return their sum 

Intermediate Level 

Question 21: What is the output of the following recursive function for n=5? 

def factorial(n): 
    if n == 0 or n == 1: 
        return 1 
    else: 
        return n * factorial(n-1) 

print(factorial(5)) 

Question 22: Write a lambda function to find the square of a number. 

# Lambda function for square of x 

Question 23: What are keyword arguments in Python functions? Give an example. 

# Explain and provide an example 

Question 24: How do you return multiple values from a function? 

# Write a function that returns both the area and perimeter of a rectangle 

Question 25: Write a function that uses both positional and keyword arguments. 

# Function with both *args and **kwargs 

Advanced Level 

Question 26: Implement a decorator that measures the execution time of a function. 

# Decorator to measure time 

Question 27: Create a closure function that remembers a multiplier value. 

# Create a multiplier function 

Question 28: Write a recursive function to find the nth Fibonacci number. 

# Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, ... 

Question 29: Implement a function that can be used as a generator to produce a sequence of numbers. 

# Generator for first n even numbers 

Question 30: Write a higher-order function that takes a function as an argument and returns a new function. 

# Higher-order function example 

Control Flow (if, match case, for loops) 

Beginner Level 

Question 31: Write a simple if-else statement to check if a number is positive or negative. 

# Check if number is positive or negative 

Question 32: What is the output of the following code? 

x = 10 
if x > 5: 
    print("A") 
elif x > 8: 
    print("B") 
else: 
    print("C") 

Question 33: Write a for loop to print numbers from 1 to 5. 

# Print numbers 1 to 5 

Question 34: How would you use a ternary operator in Python? 

# Use a ternary operator to assign "even" or "odd" based on a number 

Question 35: Write a match-case statement to print different messages based on a day name. 

# Match-case for days of week 

Intermediate Level 

Question 36: Write a nested if statement to check if a number is both positive and even. 

# Check if a number is both positive and even 

Question 37: Use a for loop with range to print every third number from 1 to 20. 

# Print 1, 4, 7, 10, 13, 16, 19 

Question 38: Implement a match-case statement that handles different types of input. 

# Match on types (int, str, list, etc.) 

Question 39: What is the output of the following code? 

for i in range(5): 
    if i == 2: 
        continue 
    print(i, end=" ") 

Question 40: Write an if-elif-else chain to grade a student based on their score. 

# A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: below 60 

Advanced Level 

Question 41: Write a pattern-matching function using match-case that extracts values from different data structures. 

# Match and extract values from various structures 

Question 42: Implement a nested loop to generate multiplication tables from 1 to 5. 

# Generate multiplication tables 

Question 43: Write a complex conditional statement using logical operators to validate a password. 

# Password must be 8+ chars, have uppercase, lowercase, and a digit 

Question 44: Use list comprehension with a conditional to filter even numbers from a list. 

# Filter even numbers from [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

Question 45: Implement guard clauses to refactor a nested if statement. 

# Refactor nested if statement with guard clauses 

Loops with Various Data Structures 

Beginner Level 

Question 46: Write a while loop that prints numbers from 5 down to 1. 

# Print 5, 4, 3, 2, 1 

Question 47: How would you iterate through a list and print each element? 

fruits = ["apple", "banana", "cherry"] 
# Print each fruit 

Question 48: Write code to iterate through a tuple and print the elements with their indices. 

colors = ("red", "green", "blue") 
# Print each color with its index 

Question 49: How would you use a for loop to iterate through a set? 

my_set = {1, 2, 3, 4, 5} 
# Print each element 

Question 50: Write a loop to iterate through a dictionary and print both keys and values. 

person = {"name": "John", "age": 30, "city": "New York"} 
# Print key-value pairs 

 

 

 

50 Additional Python Practice Questions 

String Operations 

Beginner Level 

Question 1: Write code to extract the domain name from an email address (the part after '@'). 

# Extract domain from "user@example.com" 
 

Question 2: What does the strip() method do when given an argument? 

text = "...hello world..." 
result = text.strip('.') 
# What is the value of result? 
 

Question 3: How would you check if a string contains only digits? 

# Check if "12345" contains only digits 
 

Question 4: Write code to replace all vowels in a string with '*'. 

# Replace vowels in "Python Programming" 
 

Question 5: How do you split a string into a list of characters? 

text = "hello" 
# Split into ['h', 'e', 'l', 'l', 'o'] 
 

Intermediate Level 

Question 6: Write a function that counts the frequency of each character in a string. 

# Count character frequency in "programming" 
 

Question 7: How would you format a string to include the value of π to 4 decimal places? 

import math 
# Format π to 4 decimal places 
 

Question 8: Write code to convert a camelCase string to snake_case. 

# Convert "camelCaseVariable" to "camel_case_variable" 
 

Question 9: Implement a function that checks if a string is a valid IPv4 address. 

# Check if "192.168.0.1" is a valid IPv4 address 
 

Question 10: How would you extract all URLs from a text using regular expressions? 

import re 
text = "Visit https://example.com and http://test.org for more info." 
# Extract all URLs 
 

Functions 

Beginner Level 

Question 11: Write a function that takes a variable number of arguments and returns their sum. 

# Sum variable arguments: sum_args(1, 2, 3, 4) 
 

Question 12: Create a function that takes a string and returns the reverse, but only if the string is longer than 5 characters. 

# Reverse string conditionally 
 

Question 13: Write a function that computes the factorial of a number using a loop instead of recursion. 

# Factorial using a loop 
 

Question 14: How would you create a function that has a default mutable argument but avoids the common pitfall? 

# Function with a list default argument 
 

Question 15: What is the output of this function call? 

def mystery(x, y=None): 
    if y is None: 
        y = [] 
    y.append(x) 
    return y 
 

print(mystery(1)) 
print(mystery(2)) 
 

Intermediate Level 

Question 16: Create a decorator that measures and prints the execution time of a function. 

# Execution time decorator 
 

Question 17: Write a function that caches its results (memoization) for repeated calls with the same arguments. 

# Memoization function 
 

Question 18: Implement a function composition helper that takes two functions and returns a new function applying them in sequence. 

# Function composition: compose(f, g)(x) = f(g(x)) 
 

Question 19: What will be the output of the following code? 

def outer(): 
    count = 0 
     
    def inner(): 
        nonlocal count 
        count += 1 
        return count 
     
    return inner 
 

counter = outer() 
print(counter()) 
print(counter()) 
print(counter()) 
 

Question 20: Create a function that takes a list of functions and returns a new function that applies all of them in sequence. 

# Apply multiple functions in sequence 
 

Control Flow 

Beginner Level 

Question 21: Write an if-elif-else chain that categorizes a temperature as "Cold" (below 10°C), "Mild" (10-20°C), "Warm" (20-30°C), or "Hot" (above 30°C). 

# Categorize temperature 
 

Question 22: Use the ternary operator to return the smaller of two numbers. 

# Find smaller number using ternary operator 
 

Question 23: What will be the output of the following code? 

x = 10 
y = 20 
result = "x > y" if x > y else "x <= y" 
print(result) 
 

Question 24: Write a match-case statement to handle different HTTP status codes (200, 404, 500). 

# Handle HTTP status codes 
 

Question 25: How would you handle different types of input using a match-case statement? 

# Match on different data types 
 

Intermediate Level 

Question 26: Implement a simple calculator using a match-case statement to handle operations (+, -, *, /). 

# Calculator with match-case 
 

Question 27: Write a match-case statement that handles different command-line arguments for a script. 

# Process command-line arguments 
 

Question 28: Create a function that uses try-except to safely convert a string to an integer, returning None if conversion fails. 

# Safe string to integer conversion 
 

Question 29: What will be the output of this match-case statement? 

def check_data(data): 
    match data: 
        case []: 
            return "Empty list" 
        case [x]: 
            return f"List with one element: {x}" 
        case [x, y]: 
            return f"List with two elements: {x} and {y}" 
        case [x, y, *rest]: 
            return f"List with {2 + len(rest)} elements, starting with {x} and {y}" 
        case _: 
            return "Not a list" 
 

print(check_data([1, 2, 3, 4])) 
 

Question 30: Write a match-case statement to extract values from different data structures (dict, list, set). 

# Extract values from different structures 
 

Loops with Various Data Structures 

Beginner Level 

Question 31: Write a while loop that prints numbers from 10 down to 1. 

# Print countdown from 10 to 1 
 

Question 32: Create a for loop that prints every third element in a list. 

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
# Print every third element 
 

Question 33: Write a loop that creates a dictionary where the keys are numbers from 1 to 5 and the values are their squares. 

# Create a dictionary of squares 
 

Question 34: How would you iterate through two lists simultaneously? 

names = ["Alice", "Bob", "Charlie"] 
ages = [25, 30, 35] 
# Print name and age pairs 
 

Question 35: Write a loop that finds the first duplicate value in a list. 

numbers = [1, 2, 3, 4, 2, 5, 6, 3] 
# Find first duplicate 
 

Intermediate Level 

Question 36: Create a nested loop to generate a multiplication table for numbers 1 through 5. 

# Generate multiplication table 
 

Question 37: Write a loop that groups words by their length in a dictionary. 

words = ["apple", "banana", "cat", "dog", "elephant", "fox", "giraffe"] 
# Group by length 
 

Question 38: Implement a loop that creates a running average of numbers in a list. 

values = [5, 10, 15, 20, 25] 
# Calculate running averages 
 

Question 39: Write a loop that filters out elements from a list that don't meet multiple conditions. 

numbers = [12, 5, 34, 8, 27, 15, 9, 20] 
# Filter for numbers that are even and greater than 10 
 

Question 40: Create a loop that reverses a dictionary (swapping keys and values). 

original = {"a": 1, "b": 2, "c": 3} 
# Create reversed dictionary 
 

Advanced Level 

Question 41: Implement a generator function that yields the Fibonacci sequence up to a given limit. 

# Fibonacci generator up to a limit 
 

Question 42: Write a function that flattens a nested list using a recursive approach. 

nested = [1, [2, 3], [4, [5, 6]], 7] 
# Flatten to [1, 2, 3, 4, 5, 6, 7] 
 

Question 43: Create a function that rotates the elements of a list by a specified number of positions. 

# Rotate [1, 2, 3, 4, 5] by 2 positions 
 

Question 44: Implement your own version of the enumerate() function using a generator. 

# Custom enumerate function 
 

Question 45: Write a function that takes a nested dictionary and returns all leaf values. 

nested_dict = {"a": 1, "b": {"c": 2, "d": {"e": 3}}, "f": 4} 
# Extract all leaf values: [1, 2, 3, 4] 
 

Question 46: Create a generator that yields prime numbers indefinitely. 

# Infinite prime number generator 
 

Question 47: Write a function that implements the merge step of a merge sort algorithm. 

# Merge two sorted lists into one sorted list 
 

Question 48: Implement a function that returns all possible subsets of a given set. 

# Generate power set of {1, 2, 3} 
 

Question 49: Write a function that takes a string and returns all valid IP addresses that can be formed by inserting dots. 

# Generate valid IPs from "25525511135" 
 

Question 50: Create a function that generates a Pascal's triangle up to n rows using loops. 

# Generate Pascal's triangle with n rows
